// Script de diagnostic pour l'upload d'avatar
// √Ä coller dans la console du navigateur pendant que vous √™tes connect√© √† l'application

async function diagnosticAvatarUpload() {
  console.log("üîç Diagnostic de l'upload d'avatar");
  console.log("------------------------------------");
  
  // 1. V√©rifier si Supabase est accessible
  const supabase = window.supabase;
  if (!supabase) {
    console.error("‚ùå L'instance Supabase n'est pas accessible depuis la fen√™tre");
    return;
  }
  console.log("‚úÖ Instance Supabase trouv√©e");
  
  // 2. V√©rifier si l'utilisateur est connect√©
  const { data: { user }, error: userError } = await supabase.auth.getUser();
  if (userError || !user) {
    console.error("‚ùå Impossible de r√©cup√©rer l'utilisateur connect√©:", userError?.message || "Non connect√©");
    return;
  }
  console.log("‚úÖ Utilisateur connect√©:", user.id);
  
  // 3. V√©rifier si le bucket 'avatars' existe et si nous avons acc√®s
  try {
    const { data: buckets, error: bucketsError } = await supabase.storage.listBuckets();
    
    if (bucketsError) {
      console.error("‚ùå Erreur lors de la liste des buckets:", bucketsError.message);
      return;
    }
    
    const avatarBucket = buckets.find(b => b.name === 'avatars');
    if (!avatarBucket) {
      console.error("‚ùå Le bucket 'avatars' n'existe pas");
      return;
    }
    
    console.log("‚úÖ Bucket 'avatars' trouv√©", avatarBucket);
    
    // 4. V√©rifier les permissions du bucket
    console.log("‚ÑπÔ∏è Tentative de listage des fichiers dans le bucket 'avatars'");
    const { data: files, error: filesError } = await supabase.storage
      .from('avatars')
      .list(user.id, {
        limit: 1,
        offset: 0,
      });
    
    if (filesError) {
      console.warn("‚ö†Ô∏è Impossible de lister les fichiers dans le dossier de l'utilisateur:", filesError.message);
      console.log("   Cela peut √™tre normal si vous n'avez pas encore d'avatar ou si les permissions sont restreintes.");
    } else {
      console.log("‚úÖ Acc√®s au bucket 'avatars' confirm√©. Fichiers trouv√©s:", files);
    }
    
    // 5. Tester l'upload d'un petit fichier
    console.log("‚ÑπÔ∏è Cr√©ation d'une petite image de test...");
    
    // Cr√©er un petit canvas pour g√©n√©rer une image de test
    const canvas = document.createElement('canvas');
    canvas.width = 100;
    canvas.height = 100;
    const ctx = canvas.getContext('2d');
    ctx.fillStyle = 'blue';
    ctx.fillRect(0, 0, 100, 100);
    
    // Convertir le canvas en blob
    const blob = await new Promise(resolve => canvas.toBlob(resolve, 'image/png'));
    const testFile = new File([blob], "test-avatar.png", { type: 'image/png' });
    
    console.log("‚ÑπÔ∏è Tentative d'upload du fichier de test...");
    
    const testFilePath = `${user.id}/test-avatar-${Date.now()}.png`;
    const { data: uploadData, error: uploadError } = await supabase.storage
      .from('avatars')
      .upload(testFilePath, testFile, { upsert: true });
    
    if (uploadError) {
      console.error("‚ùå √âchec de l'upload du fichier test:", uploadError.message);
      if (uploadError.statusCode === 403) {
        console.error("   Erreur de permission: V√©rifiez les politiques RLS du bucket dans Supabase");
      } else if (uploadError.statusCode === 404) {
        console.error("   Bucket non trouv√©: Le bucket 'avatars' n'existe peut-√™tre pas");
      } else if (uploadError.statusCode === 413) {
        console.error("   Fichier trop volumineux: Le fichier d√©passe la limite de taille");
      } else {
        console.error("   Code d'erreur:", uploadError.statusCode);
      }
    } else {
      console.log("‚úÖ Upload du fichier test r√©ussi:", uploadData);
      
      // 6. V√©rifier qu'on peut r√©cup√©rer l'URL publique
      const { data: { publicUrl } } = supabase.storage
        .from('avatars')
        .getPublicUrl(testFilePath);
      
      console.log("‚úÖ URL publique g√©n√©r√©e:", publicUrl);
      
      // 7. V√©rifier qu'on peut acc√©der √† l'image
      console.log("‚ÑπÔ∏è V√©rification de l'acc√®s √† l'URL publique...");
      
      try {
        const response = await fetch(publicUrl, { method: 'HEAD' });
        if (response.ok) {
          console.log("‚úÖ L'URL publique est accessible");
        } else {
          console.error("‚ùå L'URL publique n'est pas accessible:", response.status, response.statusText);
        }
      } catch (fetchError) {
        console.error("‚ùå Erreur lors de l'acc√®s √† l'URL publique:", fetchError);
      }
      
      // 8. Nettoyer le fichier de test
      try {
        const { error: removeError } = await supabase.storage
          .from('avatars')
          .remove([testFilePath]);
          
        if (removeError) {
          console.warn("‚ö†Ô∏è Impossible de supprimer le fichier de test:", removeError.message);
        } else {
          console.log("‚úÖ Fichier de test supprim√© avec succ√®s");
        }
      } catch (removeError) {
        console.warn("‚ö†Ô∏è Exception lors de la suppression du fichier de test:", removeError);
      }
    }
    
    // 9. V√©rifier la fonctionnalit√© de mise √† jour du profil
    console.log("‚ÑπÔ∏è Test de la mise √† jour du profil...");
    
    try {
      const { data: profileData, error: profileError } = await supabase
        .from('profiles')
        .select('avatar_url')
        .eq('id', user.id)
        .single();
      
      if (profileError) {
        console.error("‚ùå Impossible de r√©cup√©rer le profil:", profileError.message);
      } else {
        console.log("‚úÖ Profil r√©cup√©r√© avec succ√®s:", profileData);
        console.log("   Avatar URL actuel:", profileData.avatar_url);
      }
    } catch (profileError) {
      console.error("‚ùå Exception lors de la r√©cup√©ration du profil:", profileError);
    }
  } catch (error) {
    console.error("‚ùå Exception g√©n√©rale pendant le diagnostic:", error);
  }
  
  console.log("------------------------------------");
  console.log("üîç Diagnostic termin√©");
  console.log("Si vous rencontrez des erreurs, v√©rifiez:");
  console.log("1. Les permissions du bucket 'avatars' dans la console Supabase");
  console.log("2. La taille du fichier que vous essayez d'uploader (id√©alement moins de 2MB)");
  console.log("3. Le type de fichier (utilisez uniquement des formats d'image courants comme PNG ou JPEG)");
  console.log("4. Les probl√®mes r√©seau (essayez sur une autre connexion)");
}

// Lancer le diagnostic
diagnosticAvatarUpload(); 